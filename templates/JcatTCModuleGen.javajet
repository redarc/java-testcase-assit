<%@ jet 
   package="jcat.testcase.gen" 
   class="JcatTCModuleGen"
   imports=""
%>
<%
	JcatTCGenArgs args = (JcatTCGenArgs)argument;
    String pkgName = args.getPkgName();
    String className = args.getClassName(); 
%>
package <%=pkgName%>;

import java.io.BufferedReader;

import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;

import com.ericsson.ate.lte_ran_iov.testsupport.other.LteRm;
import com.ericsson.ate.lte_ran_iov.testsupport.tool.uetools.ueinterfaces.UeNasMode;
import com.ericsson.msr.handlers.*;
import com.ericsson.msr.testhelpers.EnbTestHelper;
import com.ericsson.tac.jcat.TestBase;
import com.ericsson.msr.handlers.enums.UeCategory;
/**
 *   
 * @name <%=className%>
 *       
 * @author 
 *       
 * @created 
 *       
 * @description
 *       
 * @revision 
 *  
 */

public class <%=className%> extends TestBase{

    @SuppressWarnings("serial")
    private final HashMap<String, String> SysConstMap = new HashMap<String, String>(){
        {
        put("", "");
        }
    };
    
    private String testId = null;
    private String description = null;
    private String servingEUtranCell = null;
    private int ue_TotalNumber = 1;
    private int ue_TputNumber = 1;
    
    // Cell parameters
    private int cellCapRrcConnSetupReq = 0;
    
    private int[] eUtranCellId;
    private boolean isTDD = false;
    
    private UeNasMode ueNasMode;
    private EnbHandler enbHandler;
    private EnbTestHelper enbTestHelper;
    private EnbConfigHandlerBuilder enbOriginalConfig;
    
    public static <%=className%>Builder newBuilder() {
        return new <%=className%>Builder();
    }
    
    protected <%=className%>(
        <%=className%>Builder builder) {
        testId = builder.getTestId();
        description = builder.getDescription();
        servingEUtranCell = builder.getServingEUtranCell();
        ue_TotalNumber = builder.getTotalNumOfUes();
        ue_TputNumber = builder.getTputNumOfUes();
        
        ueNasMode = UeNasModeBuilders.fromCategoryNumber(LteRm.ue1,UeCategory.CAT4,ue_TotalNumber,Integer.parseInt(servingEUtranCell));
        enbHandler = EnbHandler.getInstance(LteRm.enb1);
        enbTestHelper = new EnbTestHelper(testId, LteRm.enb1,enbOriginalConfig.build());
        enbOriginalConfig = EnbConfigHandler.getBuilder();
    }
    
    public void execute() {
        this.setTestcase(testId, description);
        try {
            // Initial basic parameters.
            initialize();

            eUtranCellId = enbHandler.getEutranCellId();

            //TODO implement in next delivery
            // DeactiveFeatureState();

            backENBStatus();
            configENB();

            enbTestHelper.prepareStp();
            
        } catch (Exception te) {
            te.printStackTrace();
            fail("Execution Exception~!!!!!");
        } finally {
            restoreENBStatus();
        }
    }
    
    private void initialize() {
        setTestInfo("");
        setTestStep("");

        //Test line in Nanjing need setAuthenticationKey before attach
        if(System.getProperty("testarea").equalsIgnoreCase("nanjing")){
            LteRm.ue1.getNasModeBuilder().setAuthenticationKey(
                    "01234567890123456789012345678901");
        }
    }
    
     /**
     * TODO Deliver in next release
     * Get the initial eNB configuration.<br/>
     * @throws Exception
     */
    private void backENBStatus() throws Exception {
        setTestStep("Get the configuration");
        setTestInfo("Backing up parameters so they can be restored later");
        String eutranName = isTDD ? "EUtranCellTDD=" : "EUtranCellFDD=";
        enbOriginalConfig = EnbConfigHandler.getBuilder();
        for(int cellId : eUtranCellId) {
            int originBandwidth = enbHandler.getCellBandwidth(eutranName + cellId);
            enbOriginalConfig.addAttribute(eutranName + cellId, "bandwidth", String.valueOf(originBandwidth));
        }
    }
    
     /**
     * TODO Deliver in next release
     * Configure the eNB with the parameters of feature.<br/>
     * @throws Exception
     */
    @SuppressWarnings("unused")
    private void configENB() throws Exception {
        setTestStep("start Config ENB");
        EnbConfigHandlerBuilder enbCfgHandlerBuilder = EnbConfigHandler.getBuilder();
        for(int cellId : eUtranCellId) {
            enbCfgHandlerBuilder.addSystemConstant(SysConstMap.get("CELLCAPRRCCONNSETUPREQ"),String.valueOf(cellCapRrcConnSetupReq));
        }
        enbHandler.setConfig(enbCfgHandlerBuilder.build());
    }
    
     /**
     * TODO Deliver in next release
     * Roll back the configuration of eNB.<br/>
     * @throws Exception
     */
    private void restoreENBStatus() {
        setTestStep("Clearup the ENB configuration");
        for(String key : SysConstMap.keySet()) {
             enbHandler.resetSystemConstant(SysConstMap.get(key));
        }
        try {
            enbHandler.setNodeConfig(enbOriginalConfig.build());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}



